// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/buildpacks/pack/pkg/image (interfaces: ImagePullPolicyHandler)

// Package mock_image is a generated GoMock package.
package testmocks

import (
	reflect "reflect"
	time "time"

	image "github.com/buildpacks/pack/pkg/image"
	gomock "github.com/golang/mock/gomock"
)

// MockImagePullPolicyHandler is a mock of ImagePullPolicyHandler interface.
type MockImagePullPolicyHandler struct {
	ctrl     *gomock.Controller
	recorder *MockImagePullPolicyHandlerMockRecorder
}

// MockImagePullPolicyHandlerMockRecorder is the mock recorder for MockImagePullPolicyHandler.
type MockImagePullPolicyHandlerMockRecorder struct {
	mock *MockImagePullPolicyHandler
}

// NewMockImagePullPolicyHandler creates a new mock instance.
func NewMockImagePullPolicyHandler(ctrl *gomock.Controller) *MockImagePullPolicyHandler {
	mock := &MockImagePullPolicyHandler{ctrl: ctrl}
	mock.recorder = &MockImagePullPolicyHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImagePullPolicyHandler) EXPECT() *MockImagePullPolicyHandlerMockRecorder {
	return m.recorder
}

// CheckImagePullInterval mocks base method.
func (m *MockImagePullPolicyHandler) CheckImagePullInterval(arg0, arg1 string, arg2 image.PullPolicy) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckImagePullInterval", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckImagePullInterval indicates an expected call of CheckImagePullInterval.
func (mr *MockImagePullPolicyHandlerMockRecorder) CheckImagePullInterval(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckImagePullInterval", reflect.TypeOf((*MockImagePullPolicyHandler)(nil).CheckImagePullInterval), arg0, arg1, arg2)
}

// GetDuration mocks base method.
func (m *MockImagePullPolicyHandler) GetDuration(arg0 image.PullPolicy) time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDuration", arg0)
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetDuration indicates an expected call of GetDuration.
func (mr *MockImagePullPolicyHandlerMockRecorder) GetDuration(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDuration", reflect.TypeOf((*MockImagePullPolicyHandler)(nil).GetDuration), arg0)
}

// ParsePullPolicy mocks base method.
func (m *MockImagePullPolicyHandler) ParsePullPolicy(arg0 string) (image.PullPolicy, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParsePullPolicy", arg0)
	ret0, _ := ret[0].(image.PullPolicy)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParsePullPolicy indicates an expected call of ParsePullPolicy.
func (mr *MockImagePullPolicyHandlerMockRecorder) ParsePullPolicy(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParsePullPolicy", reflect.TypeOf((*MockImagePullPolicyHandler)(nil).ParsePullPolicy), arg0)
}

// PruneOldImages mocks base method.
func (m *MockImagePullPolicyHandler) PruneOldImages(arg0 image.DockerClient) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PruneOldImages", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// PruneOldImages indicates an expected call of PruneOldImages.
func (mr *MockImagePullPolicyHandlerMockRecorder) PruneOldImages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PruneOldImages", reflect.TypeOf((*MockImagePullPolicyHandler)(nil).PruneOldImages), arg0)
}

// Read mocks base method.
func (m *MockImagePullPolicyHandler) Read(arg0 string) (*image.ImageJSON, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(*image.ImageJSON)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockImagePullPolicyHandlerMockRecorder) Read(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockImagePullPolicyHandler)(nil).Read), arg0)
}

// UpdateImagePullRecord mocks base method.
func (m *MockImagePullPolicyHandler) UpdateImagePullRecord(arg0, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImagePullRecord", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateImagePullRecord indicates an expected call of UpdateImagePullRecord.
func (mr *MockImagePullPolicyHandlerMockRecorder) UpdateImagePullRecord(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImagePullRecord", reflect.TypeOf((*MockImagePullPolicyHandler)(nil).UpdateImagePullRecord), arg0, arg1, arg2)
}

// Write mocks base method.
func (m *MockImagePullPolicyHandler) Write(arg0 *image.ImageJSON, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockImagePullPolicyHandlerMockRecorder) Write(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockImagePullPolicyHandler)(nil).Write), arg0, arg1)
}
