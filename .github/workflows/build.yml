name: build

on:
  push:
    paths-ignore:
      - '**.md'
      - 'resources/**'
      - 'CODEOWNERS'
      - 'LICENSE'
    branches:
      - main
      - 'release/**'
  pull_request:
    paths-ignore:
      - '**.md'
      - 'resources/**'
      - 'CODEOWNERS'
      - 'LICENSE'
    branches:
      - main
      - 'release/**'

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        config: [macos, linux, windows-lcow, windows-wcow]
        include:
          - config: macos
            os: macos
            runner: macos-latest
            no_docker: "true"
            pack_bin: pack
          - config: linux
            os: linux
            runner: ubuntu-latest
            no_docker: "false"
            pack_bin: pack
          - config: windows-lcow
            os: windows
            runner: [self-hosted, windows]
            no_docker: "false"
            pack_bin: pack.exe
          - config: windows-wcow
            os: windows
            runner: windows-latest
            no_docker: "false"
            pack_bin: pack.exe
    runs-on: ${{ matrix.runner }}
    env:
      PACK_BIN: ${{ matrix.pack_bin }}
      NO_DOCKER: ${{ matrix.no_docker }}
    steps:
      - name: Set git to use LF and symlinks
        if: matrix.os == 'windows'
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
          git config --global core.symlinks true
      - name: Set docker host dns helpers
        if: matrix.os == 'windows'
        run: |
          # If helper names don't resolve, augment etc/hosts with entries using primary IP
          $IPAddress=(Get-NetIPAddress -InterfaceAlias ((Get-NetRoute "0.0.0.0/0").InterfaceAlias) -AddressFamily IPv4)[0].IPAddress
          if (!(Resolve-DnsName host.docker.internal -ErrorAction SilentlyContinue)) {
            echo "${IPAddress} host.docker.internal" | Out-File -Filepath C:\Windows\System32\drivers\etc\hosts -Append -Encoding utf8
          }
          if (!(Resolve-DnsName gateway.docker.internal -ErrorAction SilentlyContinue)) {
            echo "${IPAddress} gateway.docker.internal" | Out-File -Filepath C:\Windows\System32\drivers\etc\hosts -Append -Encoding utf8
          }
      - uses: actions/checkout@v2
      - name: Derive pack version from branch name
        run: |
          [[ $GITHUB_REF =~ ^refs\/heads\/release/(.*)$ ]] && version=${BASH_REMATCH[1]} || version=0.0.0
          echo "::set-env name=PACK_VERSION::$version"
        shell: bash
      - name: Set up go
        uses: actions/setup-go@v2-beta
        with:
          go-version: '1.14'
      - name: Set up go env
        run: |
          echo "::set-env name=GOPATH::$(go env GOPATH)"
          echo "::add-path::$(go env GOPATH)/bin"
      - name: Verify
        run: make verify
      - name: Test
        env:
          TEST_COVERAGE: 1
        run: make test
      - name: Upload Coverage
        uses: codecov/codecov-action@v1
        with:
          file: ./out/tests/coverage-unit.txt
          flags: unit,os_${{ matrix.os }}
          fail_ci_if_error: true
      - name: Build
        run: make build
        env:
          PACK_BUILD: ${{ github.run_number }}
      - uses: actions/upload-artifact@v1
        if: matrix.config != 'windows-wcow'
        with:
          name: pack-${{ matrix.os }}
          path: out/${{ env.PACK_BIN }}
  release:
    if: ${{ startsWith(github.ref, 'refs/heads/release/') }}
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Derive pack version from branch name
        run: |
          [[ $GITHUB_REF =~ ^refs\/heads\/release/(.*)$ ]] && version=${BASH_REMATCH[1]}
          if [[ -z "${version}" ]]; then
            echo "pack version not detected."
            exit 1
          fi
          echo "::set-env name=PACK_VERSION::$version"
        shell: bash
      - name: Download artifacts - macos
        uses: actions/download-artifact@v1
        with:
          name: pack-macos
      - name: Download artifacts - linux
        uses: actions/download-artifact@v1
        with:
          name: pack-linux
      - name: Download artifacts - windows
        uses: actions/download-artifact@v1
        with:
          name: pack-windows
      - name: Package artifacts - macos
        run: |
          chmod +x pack-macos/pack
          tar -C pack-macos -vzcf pack-macos.tgz pack
      - name: Package artifacts - linux
        run: |
          chmod +x pack-linux/pack
          tar -C pack-linux -vzcf pack-linux.tgz pack
      - name: Package artifacts - windows
        run: zip -j pack-windows.zip pack-windows/pack.exe
      - name: Extract lifecycle version
        id: lifecycle_version
        run: |
          LIFECYCLE_VERSION=$(./pack-linux/pack report | grep 'Default Lifecycle Version:' | grep -o '[^ ]*$')
          echo "::set-output name=version::$LIFECYCLE_VERSION"
      - name: Extract pack help
        id: pack_help
        # Replacements have to do with multiline output.
        # See https://github.community/t5/GitHub-Actions/set-output-Truncates-Multiline-Strings/m-p/38372/highlight/true#M3322
        run: |
          PACK_HELP=$(./pack-linux/pack --help)
          PACK_HELP="${PACK_HELP//'%'/'%25'}"
          PACK_HELP="${PACK_HELP//$'\n'/'%0A'}"
          PACK_HELP="${PACK_HELP//$'\r'/'%0D'}"
          echo "::set-output name=help::$PACK_HELP"
      - name: Generate changelog
        uses: actions/github-script@v1
        id: changelog
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          result-encoding: string
          script: |
            const path = require('path');
            const scriptPath = path.resolve('.github/workflows/build/changelog/index.js');
            require(scriptPath)({core, github, repository: "${{ env.GITHUB_REPOSITORY }}", version: "${{ env.PACK_VERSION }}" });
      - name: Create Release
        id: create_release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.PACK_VERSION }}
          release_name: pack v${{ env.PACK_VERSION }}
          draft: true
          prerelease: false
          body: |
            # pack v${{ env.PACK_VERSION }}
            > This is a **beta** release of the Cloud Native Buildpack local CLI. This platform implementation should be relatively stable and reliable, but breaking changes in the underlying [specification](https://github.com/buildpack/spec) may be implemented without notice. Note that pack is intended for local image builds, and thus requires a Docker daemon. The [lifecycle](https://github.com/buildpack/lifecycle) should be used directly when building on cloud platforms.

            ## Prerequisites

            - The [Docker daemon](https://www.docker.com/get-started) must be installed on your workstation or accessible over the network.

            ## Install

            #### Linux

            On Linux you can use the one of the following methods of installation.

            ##### Arch Linux

            - [pack-cli](https://aur.archlinux.org/packages/pack-cli/)
            - [pack-cli-bin](https://aur.archlinux.org/packages/pack-cli-bin/)

            ##### Command

            ```bash
            (curl -sSL "https://github.com/buildpacks/pack/releases/download/v${{ env.PACK_VERSION }}/pack-v${{ env.PACK_VERSION }}-linux.tgz" | sudo tar -C /usr/local/bin/ --no-same-owner -xzv pack)
            ```

            #### macOS

            On macOS, you can use Homebrew:

            ```bash
            brew install buildpacks/tap/pack
            ```

            #### Windows

            On Windows, you can use [Chocolatey](https://chocolatey.org/):

            ```bash
            choco install pack
            ```

            #### Manual

            1. Download the `.tgz` or `.zip` file for your platform
            2. Extract the `pack` binary
            3. (Optional) Add the directory containing `pack` to `PATH`, or copy `pack` to a directory like `/usr/local/bin`

            ## Run

            Run the command `pack`.

            You should see the following output

            ```text
            ${{ steps.pack_help.outputs.help }}
            ```

            ## Info

            Builders created with this release of the pack CLI continue to contain [lifecycle v${{ steps.lifecycle_version.outputs.version }}](https://github.com/buildpack/lifecycle/releases/tag/v${{ steps.lifecycle_version.outputs.version }}) by default.

            ${{ steps.changelog.outputs.contents }}
      - name: Upload Release Asset - macos
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./pack-macos.tgz
          asset_name: pack-v${{ env.PACK_VERSION }}-macos.tgz
          asset_content_type: application/gzip
      - name: Upload Release Asset - linux
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./pack-linux.tgz
          asset_name: pack-v${{ env.PACK_VERSION }}-linux.tgz
          asset_content_type: application/gzip
      - name: Upload Release Asset - windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./pack-windows.zip
          asset_name: pack-v${{ env.PACK_VERSION }}-windows.zip
          asset_content_type: application/zip
